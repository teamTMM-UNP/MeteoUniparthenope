# Verify there is are node modules at user home
if [ -d ~/node_modules ]; then 
    ls -la ~/
    ls -la ~/node_modules
    echo "node_modules at ~ found! Please remvoe it!"
    exit 1
fi

# Verify there is are node modules in workspace
if [ -d ~/workspace/node_modules ]; then 
    ls -la ~/workspace
    ls -la ~/workspace/node_modules
    echo "node_modules at ~/workspace found! Please remvoe it!"
    exit 1
fi

# Verify network shares
set -e
echo 'PATH='$PATH
rm -rf tns-template-hello-world.tgz
set +e
cp /tns-dist/template-hello-world/Stable/tns-template-hello-world.tgz .
if [ $? -eq 0 ]; then
     echo "Network shares are ok."
else
     echo "Network shares not available!"
     exit 1
fi

# Verify required software is available
set -e
java -version
node -v
npm -v
grunt -h
mvn -v
ios-deploy -V
appium -v
carthage version

# Verify cmake version:
if [[ $(cmake --version) =~ "3.3.2" ]]; then
	echo "cmake@3.3.2 found!";
else
	echo "cmake@3.3.2 not found!"
	cmake --version
	exit 1
fi

# Verify tns is installed
if ls $(npm root -g) | grep -q 'nativescript'; then   
	echo "tns found!";
else
	echo "tns not found!"
	exit 1
fi

# Verify ns-ci-build-tool
if ls $(npm root -g) | grep -q 'ns-ci-build-tool'; then   
	echo "ns found!";
else
	echo "ns not found!"
	exit 1
fi

# Verify ANDROID_HOME is not empty
verify_android_home() {
	android=$(echo $ANDROID_HOME)
	if [[ $android != "" ]]; then
		echo "ANDROID_HOME=$android"
	else
		echo "ANDROID_HOME is empty!"
		exit 1
	fi
}

verify_android_home

# Verify INTEL HAXM
os_ver=$(sw_vers -productVersion)
echo "OS Version: $os_ver"
if [[ $os_ver == "10.13" ]]; then
	echo "Can't verify HAXM on macOS High Sierra!"
else
	chmod +x $ANDROID_HOME/extras/intel/Hardware_Accelerated_Execution_Manager/silent_install.sh
	if $ANDROID_HOME/extras/intel/Hardware_Accelerated_Execution_Manager/silent_install.sh -v | grep -q '.'; 
	then
	  echo "Intel HAXM found!"
	else
	  echo "Intel HAXM NOT found!"
	  exit 1
	fi
fi

# Verify mobile device server
if echo $USE_DEVICE_CONTROLLER_SERVER | grep -q 'rue'; then
        echo "Mobile device server should be running. Check it...";
	if curl http://127.0.0.1:8700/api/v1/devices -m 360 | grep -q 'busySince';
        then
          echo "Mobile device server is running!"
        else
          echo "Mobile device server is not running!"
          exit 1
        fi
else
        echo "No mobile device server. Check skipped."
fi

# Verify iOS Simulators
if xcrun simctl list devices | grep -q 'iPhone 7 100'; then
	echo "Found 'iPhone 7 100' simulator."
else
	echo "No 'iPhone 7 100' simulator."
	exit 1
fi

if xcodebuild -version | grep -q 'Xcode 8.'; then
	echo "Xcode 8 detected!"
	echo "Skip check for 'iPhone 7/X 110' simulators."
else
	echo "Xcode 9 detected!"
	if xcrun simctl list devices | grep -q 'iPhone X 110'; then
		echo "Found 'iPhone X 110' simulator."
	else
		echo "No 'iPhone X 110' simulator."
		exit 1
	fi
	if xcrun simctl list devices | grep -q 'iPhone 7 110'; then
		echo "Found 'iPhone 7 110' simulator."
	else
		echo "No 'iPhone 7 110' simulator."
		exit 1
	fi
fi

# Verify WebDriverAgent
if [ -e /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/Carthage ]
then
	if ls -d -la /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/Carthage | grep -q 'drwxr-xr-x'; 
	then
		echo "WebDriverAgent is OK!"
	else
		echo "WebDriverAgent not OK!"
		ls -d -la /usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent/Carthage
		exit 1
fi
else
    echo "Skip WebDriverAgent check."
fi

echo "Free mem:"
top -l 1 | grep PhysMem: | awk '{print $6}'
