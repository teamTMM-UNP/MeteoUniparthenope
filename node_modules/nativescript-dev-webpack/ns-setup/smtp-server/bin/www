#!/usr/bin/env node
"use strict";

const server = require("../src/server");
const debug = require("debug")("express:server");
const http = require("http");

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (port <= 0 || isNaN(port)) {
    // named pipe
    return val;
  }

  return port;
}
const httpPort = normalizePort(process.argv.includes("--port") ? process.argv[process.argv.indexOf("--port") + 1] : 8800);

let httpServer;

const start = async () => {
  return new Promise(async (resolve, reject) => {
    const onListening = () => {
      const addr = httpServer.address();
      const bind = typeof addr === "string"
        ? "pipe " + addr
        : "port " + addr.port;
      debug("Listening on " + bind);
      resolve(true);
    };

    const onClose = () => {

      console.log("Server closed!");
      resolve();
    };

    const onError = (error) => {
      if (error.syscall !== "listen") {
        reject();
        throw error;
      }

      const bind = typeof httpPort === "string"
        ? "Pipe " + httpPort
        : "Port " + httpPort;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case "EACCES":
          console.error(bind + " requires elevated privileges");
          process.exit(1);
          break;
        case "EADDRINUSE":
          console.error(bind + " is already in use");
          process.exit(1);
          break;
        default:
          throw error;
      }
    };

    const app = (await server.Server.bootstrap()).app;
    app.set("port", httpPort);
    console.log("Port: ", httpPort);

    httpServer = http.createServer(app);
    httpServer.listen(httpPort);
    httpServer.on("error", onError);
    httpServer.on("listening", onListening);
    httpServer.once("close", onClose);
    resolve(true);
  });
}

const onExit = (event) => {
  if (httpServer) {
    httpServer.close();
  }
}

process.on("exit", () => onExit("exit"));
process.on("SIGTERM", () => onExit("SIGTERM"));
process.on("uncaughtException", () => onExit("uncaughtException"));

start();